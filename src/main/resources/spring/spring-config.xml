<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:context="http://www.springframework.org/schema/context"
            xmlns:cache="http://www.springframework.org/schema/cache"
            xmlns:p="http://www.springframework.org/schema/p"
            xsi:schemaLocation="http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/cache
            http://www.springframework.org/schema/cache/spring-cache-4.0.xsd"
            default-lazy-init="false" default-autowire="byName">

    <context:annotation-config/>

    <!--在spring-servlet.xml中只需要扫描所有带@Controller注解的类，
    在applicationContext中可以扫描所有其他带有注解的类（也可以过滤掉带@Controller注解的类）。-->
    <context:component-scan base-package="com.zkk.test">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--这个配置项缺省使用了一个名字叫 cacheManager 的缓存管理器，这个缓存管理器有一个 spring 的缺省实现，
        即 org.springframework.cache.support.SimpleCacheManager，这个缓存管理器实现了我们刚刚自定义
        的缓存管理器的逻辑，它需要配置一个属性 caches，即此缓存管理器管理的缓存集合，除了缺省的名字叫 default
        的缓存，我们还自定义了一个名字叫 accountCache 的缓存，使用了缺省的内存存储方案 ConcurrentMapCacheFactoryBean，
        它是基于 java.util.concurrent.ConcurrentHashMap 的一个内存缓存实现方案。-->
    <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true"/>
    <!--<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
        <!--<property name="caches">-->
            <!--<set>-->
                <!--<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">-->
                    <!--<property name="name" value="default"/>-->
                <!--</bean>-->
                <!--&lt;!&ndash;<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">&ndash;&gt;-->
                    <!--&lt;!&ndash;<property name="name" value="accountCache"/>&ndash;&gt;-->
                <!--&lt;!&ndash;</bean>&ndash;&gt;-->
                <!--&lt;!&ndash;spring2.5以后，为了简化setter方法属性注入，引用p名称空间的概念，-->
                <!--可以将<property> 子元素，简化为<bean>元素属性配置 ！！&ndash;&gt;-->
                <!--<bean class="com.zkk.test.util.MyCache" p:name="accountCache" />-->
                <!--&lt;!&ndash;那么最终spring容器只会实例化后面的这个bean，后者将前者覆盖了。这种情况下，要排查问题很困难。&ndash;&gt;-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="simpleCacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default" />
            </set>
        </property>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
        <property name="cacheManagers">
            <list>
                <ref bean="simpleCacheManager" />
                <ref bean="guavaCacheManager" />
            </list>
        </property>
        <!--设置一个找不到缓存就不做任何操作的标志位-->
        <property name="fallbackToNoOpCache" value="true" />
    </bean>

    <bean id="guavaCacheManager" class="org.springframework.cache.guava.GuavaCacheManager">
        <property name="cacheSpecification" value="concurrencyLevel=4,expireAfterAccess=100s,expireAfterWrite=100s" />
        <property name="cacheNames">
            <list>
                <value>dictTableCache</value>
            </list>
        </property>
    </bean>
    <!--设置guava cache缓存策略  生存期为24小时  最大100个缓存数-->
    <bean id="defaultCacheBuilder"
          class="com.google.common.cache.CacheBuilder"
          factory-method="from">
        <constructor-arg value="maximumSize=100, expireAfterWrite=24h"/>
    </bean>
</beans>